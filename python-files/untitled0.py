# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1niq2m2NmYb-xezzVrDJAeaXi0gm_w7J6
"""

import PySimpleGUI as sg
import pyaudio
import keyboard

# Функция для проверки состояния микрофона
def is_microphone_on():
    p = pyaudio.PyAudio()
    try:
        stream = p.open(format=pyaudio.paInt16,
                        channels=1,
                        rate=44100,
                        input=True,
                        frames_per_buffer=1024)
        stream.close()
        return True
    except OSError:
        return False
    finally:
        p.terminate()

# Функция для переключения состояния микрофона
def toggle_microphone():
    # Здесь можно добавить логику для включения/выключения микрофона
    pass

# Создание интерфейса
layout = [[sg.Text('Микрофон: ', key='-STATUS-')],
          [sg.Button('Выход', key='-EXIT-')]]

window = sg.Window('Управление микрофоном', layout)

# Основной цикл
while True:
    event, values = window.read(timeout=1000)

    if event == sg.WINDOW_CLOSED or event == '-EXIT-':
        break

    # Проверка нажатия клавиши (например, F9)
    if keyboard.is_pressed('F9'):
        toggle_microphone()

    # Обновление состояния микрофона
    status = 'Включен' if is_microphone_on() else 'Выключен'
    window['-STATUS-'].update(f'Микрофон: {status}')

window.close()



import PySimpleGUI as sg
import pyaudio
import keyboard

# Функция для проверки состояния микрофона
def is_microphone_on():
    p = pyaudio.PyAudio()
    try:
        stream = p.open(format=pyaudio.paInt16,
                        channels=1,
                        rate=44100,
                        input=True,
                        frames_per_buffer=1024)
        stream.close()
        return True
    except OSError:
        return False
    finally:
        p.terminate()

# Функция для переключения состояния микрофона
def toggle_microphone():
    # Здесь можно добавить логику для включения/выключения микрофона
    pass

# Создание интерфейса
layout = [[sg.Text('Микрофон: ', key='-STATUS-')],
          [sg.Button('Выход', key='-EXIT-')]]

window = sg.Window('Управление микрофоном', layout)

# Основной цикл
while True:
    event, values = window.read(timeout=1000)

    if event == sg.WINDOW_CLOSED or event == '-EXIT-':
        break

    # Проверка нажатия клавиши (например, F9)
    if keyboard.is_pressed('F9'):
        toggle_microphone()

    # Обновление состояния микрофона
    status = 'Включен' if is_microphone_on() else 'Выключен'
    window['-STATUS-'].update(f'Микрофон: {status}')

window.close()

import PySimpleGUI as sg
import pyaudio
import keyboard

# Функция для проверки состояния микрофона
def is_microphone_on():
    p = pyaudio.PyAudio()
    try:
        stream = p.open(format=pyaudio.paInt16,
                        channels=1,
                        rate=44100,
                        input=True,
                        frames_per_buffer=1024)
        stream.close()
        return True
    except OSError:
        return False
    finally:
        p.terminate()

# Функция для переключения состояния микрофона
def toggle_microphone():
    # Здесь можно добавить логику для включения/выключения микрофона
    pass

# Создание интерфейса
layout = [[sg.Text('Микрофон: ', key='-STATUS-')],
          [sg.Button('Выход', key='-EXIT-')]]

window = sg.Window('Управление микрофоном', layout)

# Основной цикл
while True:
    event, values = window.read(timeout=1000)

    if event == sg.WINDOW_CLOSED or event == '-EXIT-':
        break

    # Проверка нажатия клавиши (например, F9)
    if keyboard.is_pressed('F9'):
        toggle_microphone()

    # Обновление состояния микрофона
    status = 'Включен' if is_microphone_on() else 'Выключен'
    window['-STATUS-'].update(f'Микрофон: {status}')

window.close()

pip install PySimpleGUI

import PySimpleGUI as sg
import pyaudio
import keyboard

# Функция для проверки состояния микрофона
def is_microphone_on():
    p = pyaudio.PyAudio()
    try:
        stream = p.open(format=pyaudio.paInt16,
                        channels=1,
                        rate=44100,
                        input=True,
                        frames_per_buffer=1024)
        stream.close()
        return True
    except OSError:
        return False
    finally:
        p.terminate()

# Функция для переключения состояния микрофона
def toggle_microphone():
    # Здесь можно добавить логику для включения/выключения микрофона
    pass

# Создание интерфейса
layout = [[sg.Text('Микрофон: ', key='-STATUS-')],
          [sg.Button('Выход', key='-EXIT-')]]

window = sg.Window('Управление микрофоном', layout)

# Основной цикл
while True:
    event, values = window.read(timeout=1000)

    if event == sg.WINDOW_CLOSED or event == '-EXIT-':
        break

    # Проверка нажатия клавиши (например, F9)
    if keyboard.is_pressed('F9'):
        toggle_microphone()

    # Обновление состояния микрофона
    status = 'Включен' if is_microphone_on() else 'Выключен'
    window['-STATUS-'].update(f'Микрофон: {status}')

window.close()

pip install pyaudio



import PySimpleGUI as sg
import pyaudio
import keyboard

# Функция для проверки состояния микрофона
def is_microphone_on():
    p = pyaudio.PyAudio()
    try:
        stream = p.open(format=pyaudio.paInt16,
                        channels=1,
                        rate=44100,
                        input=True,
                        frames_per_buffer=1024)
        stream.close()
        return True
    except OSError:
        return False
    finally:
        p.terminate()

# Функция для переключения состояния микрофона
def toggle_microphone():
    # Здесь можно добавить логику для включения/выключения микрофона
    pass

# Создание интерфейса
layout = [[sg.Text('Микрофон: ', key='-STATUS-')],
          [sg.Button('Выход', key='-EXIT-')]]

window = sg.Window('Управление микрофоном', layout)

# Основной цикл
while True:
    event, values = window.read(timeout=1000)

    if event == sg.WINDOW_CLOSED or event == '-EXIT-':
        break

    # Проверка нажатия клавиши (например, F9)
    if keyboard.is_pressed('F9'):
        toggle_microphone()

    # Обновление состояния микрофона
    status = 'Включен' if is_microphone_on() else 'Выключен'
    window['-STATUS-'].update(f'Микрофон: {status}')

window.close()

import PySimpleGUI as sg
import pyaudio

def is_microphone_active():
    # Создаем поток для проверки активности микрофона
    audio = pyaudio.PyAudio()
    try:
        stream = audio.open(format=pyaudio.paInt16, channels=1, rate=44100, input=True, frames_per_buffer=1024)
        stream.close()
        return True
    except OSError:
        return False
    finally:
        audio.terminate()

layout = [
    [sg.Text('Состояние микрофона:'), sg.Text('', key='-STATUS-', size=(10, 1))],
    [sg.Button('Обновить'), sg.Button('Выход')]
]

window = sg.Window('Индикатор микрофона', layout)

while True:
    event, values = window.read(timeout=1000)

    if event == sg.WINDOW_CLOSED or event == 'Выход':
        break

    if event == 'Обновить' or event == sg.TIMEOUT_EVENT:
        status = 'Включен' if is_microphone_active() else 'Выключен'
        window['-STATUS-'].update(status)

window.close()

!apt-get install -y portaudio19-dev
!pip install pyaudio

import PySimpleGUI as sg
import pyaudio

def is_microphone_active():
    # Создаем поток для проверки активности микрофона
    audio = pyaudio.PyAudio()
    try:
        stream = audio.open(format=pyaudio.paInt16, channels=1, rate=44100, input=True, frames_per_buffer=1024)
        stream.close()
        return True
    except OSError:
        return False
    finally:
        audio.terminate()

layout = [
    [sg.Text('Состояние микрофона:'), sg.Text('', key='-STATUS-', size=(10, 1))],
    [sg.Button('Обновить'), sg.Button('Выход')]
]

window = sg.Window('Индикатор микрофона', layout)

while True:
    event, values = window.read(timeout=1000)

    if event == sg.WINDOW_CLOSED or event == 'Выход':
        break

    if event == 'Обновить' or event == sg.TIMEOUT_EVENT:
        status = 'Включен' if is_microphone_active() else 'Выключен'
        window['-STATUS-'].update(status)

window.close()

!pip install PySimpleGUI

import PySimpleGUI as sg

import tkinter as tk
import pyaudio

def is_microphone_active():
    audio = pyaudio.PyAudio()
    try:
        stream = audio.open(format=pyaudio.paInt16, channels=1, rate=44100, input=True, frames_per_buffer=1024)
        stream.close()
        return True
    except OSError:
        return False
    finally:
        audio.terminate()

def update_status():
    status = "Включен" if is_microphone_active() else "Выключен"
    status_label.config(text=status)

# Создаем главное окно
root = tk.Tk()
root.title("Индикатор микрофона")

# Добавляем элементы интерфейса
tk.Label(root, text="Состояние микрофона:").pack()
status_label = tk.Label(root, text="", font=("Arial", 12))
status_label.pack()

tk.Button(root, text="Обновить", command=update_status).pack()
tk.Button(root, text="Выход", command=root.quit).pack()

# Запускаем обновление статуса при старте
update_status()

# Запускаем главный цикл приложения
root.mainloop()