# -*- coding: utf-8 -*-
"""updated26

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ka30_e3vUIZTUlvIBxEOzfig8HaN-JMN
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, accuracy_score
import ipywidgets as widgets
from IPython.display import display, clear_output
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor

df = pd.read_excel(r'/content/feedpythonGH.xlsx')

for col in ['BL-101', 'E-101', 'V-122', 'V-145', 'v-166', 'v-182']:
    df[col] = df[col].replace({'on': 1, 'off': 0})

features = ['TIAH-101(°C)', 'PIAH-104(torr)', 'Initial mass(kg)', 'MFR(kg/hr)', 'PIAH-109(torr)', 'PIAH-113(torr)', 'PIAH-115A(torr)']
targets = ['Time to finish container(days)', 'Remaining mass(kg)', 'BL-101', 'E-101', 'V-122', 'V-145', 'v-166', 'v-182']

X = df[features]
y = df[targets]

# Handle missing values
for col in X.columns:
    if pd.api.types.is_numeric_dtype(X[col]):
        X[col] = X[col].fillna(X[col].mean())
for col in y.columns:
    if pd.api.types.is_numeric_dtype(y[col]):
        y[col] = y[col].fillna(y[col].mean())

# Scale numerical features
scaler = StandardScaler()
X = scaler.fit_transform(X)
X = pd.DataFrame(X, columns=features)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=62)

# Train the models (using RandomForestRegressor)
models = {}
for target in targets:
    if target in ['BL-101', 'E-101']: # Use RandomForest for BL-101 and E101
        model = RandomForestRegressor(n_estimators=100, random_state=42)
    else:
        model = LinearRegression()
    model.fit(X_train, y_train[target])
    models[target] = model
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test[target], y_pred)
    print(f"Mean Squared Error for {target}: {mse}")

    if target in ['BL-101', 'E-101','V-122', 'V-145', 'v-166', 'v-182']:
      y_pred_class = [1 if pred >= 0.5 else 0 for pred in y_pred]
      accuracy = accuracy_score(y_test[target], y_pred_class)
      print(f"Accuracy Score for {target}: {accuracy}")

# Prediction function
def predict_and_display(b):
    clear_output(wait=True)
    display(input_widgets)

    new_data = pd.DataFrame({
        'TIAH-101(°C)': [TIAH_101.value],
        'PIAH-104(torr)': [PIAH_104.value],
        'Initial mass(kg)': [initial_mass.value],
        'MFR(kg/hr)': [MFR.value],
        'PIAH-109(torr)': [PIAH_109.value],
        'PIAH-113(torr)': [PIAH_113.value],
        'PIAH-115A(torr)': [PIAH_115A.value]
    })
    # Scale the new data
    new_data = scaler.transform(new_data)
    new_data = pd.DataFrame(new_data, columns = features)
    new_predictions = {}
    for target, model in models.items():
        new_predictions[target] = model.predict(new_data)

    output_html = "<h2>Predictions:</h2>"
    for target in ['BL-101', 'E-101', 'V-122', 'V-145', 'v-166', 'v-182']:
      prediction = new_predictions[target][0]
      output_html += f"<p><strong>{target}:</strong> {'1' if prediction >= 0.5 else '0'}</p>"

    for target in ['Time to finish container(days)', 'Remaining mass(kg)']:
        output_html += f"<p><strong>{target}:</strong> {new_predictions[target][0]:.2f}</p>"

    display(widgets.HTML(output_html))

# Input widgets
TIAH_101 = widgets.FloatText(description='TIAH-101(°C):', value=30)
PIAH_104 = widgets.FloatText(description='PIAH-104(torr):', value=145)
initial_mass = widgets.FloatText(description='Initial mass(kg):', value=1000)
MFR = widgets.FloatText(description='MFR(kg/hr):', value=7.4)
PIAH_109 = widgets.FloatText(description='PIAH-109(torr):', value=67)
PIAH_113 = widgets.FloatText(description='PIAH-113(torr):', value=48)
PIAH_115A = widgets.FloatText(description='PIAH-115A(torr):', value=40)

predict_button = widgets.Button(description="Predict")
predict_button.on_click(predict_and_display)

input_widgets = widgets.VBox([
    TIAH_101, PIAH_104, initial_mass, MFR,
    PIAH_109, PIAH_113, PIAH_115A, predict_button
])

display(input_widgets)

# prompt: in exe fiel only execute input widgets where we pricdict the data

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, accuracy_score
import ipywidgets as widgets
from IPython.display import display, clear_output
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor

# Load your data (replace with your actual file path)
# Assuming your data is in a file named 'feedpythonGH.xlsx' in your current working directory
try:
    df = pd.read_excel('feedpythonGH.xlsx')
except FileNotFoundError:
    print("Error: 'feedpythonGH.xlsx' not found. Please ensure the file is in the current directory or provide the correct path.")
    exit()

# ... (rest of your data preprocessing and model training code)

# ... (your existing code for model training)


# Prediction function (modified to handle specific cases)
def predict_and_display(b):
    clear_output(wait=True)
    display(input_widgets)  # Display the widgets

    # Get input values from the widgets
    input_data = {
        'TIAH-101(°C)': TIAH_101.value,
        'PIAH-104(torr)': PIAH_104.value,
        'Initial mass(kg)': initial_mass.value,
        'MFR(kg/hr)': MFR.value,
        'PIAH-109(torr)': PIAH_109.value,
        'PIAH-113(torr)': PIAH_113.value,
        'PIAH-115A(torr)': PIAH_115A.value
    }

    # Create a DataFrame from the input data
    new_data = pd.DataFrame([input_data])

    # Scale the new data
    new_data_scaled = scaler.transform(new_data)
    new_data = pd.DataFrame(new_data_scaled, columns=features)

    new_predictions = {}
    for target, model in models.items():
        new_predictions[target] = model.predict(new_data)

    output_html = "<h2>Predictions:</h2>"

    # ... (Rest of your prediction logic and output display)


# Input widgets with pre-filled values
TIAH_101 = widgets.FloatText(description='TIAH-101(°C):', value=30)
PIAH_104 = widgets.FloatText(description='PIAH-104(torr):', value=145)
initial_mass = widgets.FloatText(description='Initial mass(kg):', value=1000)
MFR = widgets.FloatText(description='MFR(kg/hr):', value=7.4)
PIAH_109 = widgets.FloatText(description='PIAH-109(torr):', value=67)
PIAH_113 = widgets.FloatText(description='PIAH-113(torr):', value=48)
PIAH_115A = widgets.FloatText(description='PIAH-115A(torr):', value=40)

predict_button = widgets.Button(description="Predict")
predict_button.on_click(predict_and_display)

input_widgets = widgets.VBox([
    TIAH_101, PIAH_104, initial_mass, MFR,
    PIAH_109, PIAH_113, PIAH_115A, predict_button
])

display(input_widgets)

# prompt: rewrite complete code and make this code executable for exe

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, accuracy_score
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor

def main():
    try:
        df = pd.read_excel('feedpythonGH.xlsx')
    except FileNotFoundError:
        print("Error: 'feedpythonGH.xlsx' not found. Please ensure the file is in the current directory or provide the correct path.")
        return

    for col in ['BL-101', 'E-101', 'V-122', 'V-145', 'v-166', 'v-182']:
        df[col] = df[col].replace({'on': 1, 'off': 0})

    features = ['TIAH-101(°C)', 'PIAH-104(torr)', 'Initial mass(kg)', 'MFR(kg/hr)', 'PIAH-109(torr)', 'PIAH-113(torr)', 'PIAH-115A(torr)']
    targets = ['Time to finish container(days)', 'Remaining mass(kg)', 'BL-101', 'E-101', 'V-122', 'V-145', 'v-166', 'v-182']
    X = df[features]
    y = df[targets]

    # Handle missing values
    for col in X.columns:
        if pd.api.types.is_numeric_dtype(X[col]):
            X[col] = X[col].fillna(X[col].mean())
    for col in y.columns:
        if pd.api.types.is_numeric_dtype(y[col]):
            y[col] = y[col].fillna(y[col].mean())

    # Scale numerical features
    scaler = StandardScaler()
    X = scaler.fit_transform(X)
    X = pd.DataFrame(X, columns=features)

    # Split the data
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=62)

    # Train the models
    models = {}
    for target in targets:
        if target in ['BL-101', 'E-101']:
            model = RandomForestRegressor(n_estimators=100, random_state=42)
        else:
            model = LinearRegression()
        model.fit(X_train, y_train[target])
        models[target] = model
        y_pred = model.predict(X_test)
        mse = mean_squared_error(y_test[target], y_pred)
        print(f"Mean Squared Error for {target}: {mse}")

        if target in ['BL-101', 'E-101', 'V-122', 'V-145', 'v-166', 'v-182']:
            y_pred_class = [1 if pred >= 0.5 else 0 for pred in y_pred]
            accuracy = accuracy_score(y_test[target], y_pred_class)
            print(f"Accuracy Score for {target}: {accuracy}")

    # Prediction function (modified for standalone execution)
    def predict(input_data):
      new_data = pd.DataFrame([input_data])
      new_data_scaled = scaler.transform(new_data)
      new_data = pd.DataFrame(new_data_scaled, columns=features)
      new_predictions = {}
      for target, model in models.items():
          new_predictions[target] = model.predict(new_data)[0]

      return new_predictions

    #Example usage:
    input_data = {
        'TIAH-101(°C)': 30,
        'PIAH-104(torr)': 145,
        'Initial mass(kg)': 1000,
        'MFR(kg/hr)': 7.4,
        'PIAH-109(torr)': 67,
        'PIAH-113(torr)': 48,
        'PIAH-115A(torr)': 40
    }

    predictions = predict(input_data)
    for target, value in predictions.items():
      print(f"Prediction for {target}: {value}")
if __name__ == "__main__":
    main()