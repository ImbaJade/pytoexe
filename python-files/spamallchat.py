from telethon import TelegramClient, events
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.errors import ChatWriteForbiddenError, UsernameNotOccupiedError, PeerIdInvalidError, ChannelPrivateError
import asyncio
import os
import configparser

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG_FILE = 'config.ini'
SESSION_FILE = 'spam_session'
GROUP_LIST_FILE = 'groups.txt'
DELAY_SECONDS = 5  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config():
    config = configparser.ConfigParser()
    if os.path.exists(CONFIG_FILE):
        config.read(CONFIG_FILE)
        return (
            config.get('Telegram', 'API_ID', fallback=''),
            config.get('Telegram', 'API_HASH', fallback=''),
            config.get('Telegram', 'PHONE_NUMBER', fallback='')
        )
    return '', '', ''

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def save_config(api_id, api_hash, phone_number):
    config = configparser.ConfigParser()
    config['Telegram'] = {
        'API_ID': api_id,
        'API_HASH': api_hash,
        'PHONE_NUMBER': phone_number
    }
    with open(CONFIG_FILE, 'w') as configfile:
        config.write(configfile)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_credentials():
    api_id = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API ID: ").strip()
    api_hash = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API HASH: ").strip()
    phone_number = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ").strip()
    save_config(api_id, api_hash, phone_number)
    return api_id, api_hash, phone_number

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
API_ID, API_HASH, PHONE_NUMBER = load_config()
if not all([API_ID, API_HASH, PHONE_NUMBER]):
    print("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
    API_ID, API_HASH, PHONE_NUMBER = get_credentials()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telethon
client = TelegramClient(SESSION_FILE, int(API_ID), API_HASH)

# –ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –∏–∑ —Ñ–∞–π–ª–∞
def read_groups():
    if os.path.exists(GROUP_LIST_FILE):
        with open(GROUP_LIST_FILE, 'r') as file:
            return [line.strip() for line in file.readlines()]
    return []

# –ó–∞–ø–∏—Å—å —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –≤ —Ñ–∞–π–ª
def write_groups(groups):
    with open(GROUP_LIST_FILE, 'w') as file:
        for group in groups:
            file.write(group + '\n')

# –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É
def add_group(group):
    groups = read_groups()
    if group not in groups:
        groups.append(group)
        write_groups(groups)
        print(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    else:
        print(f"‚ùå –ì—Ä—É–ø–ø–∞ {group} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

# –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É
def remove_group(group):
    groups = read_groups()
    if group in groups:
        groups.remove(group)
        write_groups(groups)
        print(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group} —É–¥–∞–ª–µ–Ω–∞")
    else:
        print(f"‚ùå –ì—Ä—É–ø–ø–∞ {group} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

# –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
def clear_groups():
    if os.path.exists(GROUP_LIST_FILE):
        os.remove(GROUP_LIST_FILE)
        print("‚úÖ –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –æ—á–∏—â–µ–Ω")
    else:
        print("‚ùå –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —É–∂–µ –ø—É—Å—Ç")

async def join_group(group):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª—É.
    """
    try:
        await client(JoinChannelRequest(group))
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ {group}")
    except UsernameNotOccupiedError:
        print(f"‚ùå –ì—Ä—É–ø–ø–∞ {group} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except PeerIdInvalidError:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–ª–∏ –∏–º—è –≥—Ä—É–ø–ø—ã {group}")
    except ChannelPrivateError:
        print(f"‚ùå –ì—Ä—É–ø–ø–∞ {group} –ø—Ä–∏–≤–∞—Ç–Ω–∞—è, –∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ {group}: {str(e)}")

async def send_spam(text, count):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    groups = read_groups()
    if not groups:
        print("‚ùå –ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
        return

    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏: {count} —Ä–∞–∑(–∞) —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {DELAY_SECONDS} —Å–µ–∫.")

    for i in range(count):
        for group in groups:
            try:
                await join_group(group)
                await client.send_message(entity=group, message=text)
                print(f"‚úÖ [{i+1}/{count}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {group}")
            except ChatWriteForbiddenError:
                print(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ {group}")
            except ChannelPrivateError:
                print(f"‚ùå –ì—Ä—É–ø–ø–∞ {group} –ø—Ä–∏–≤–∞—Ç–Ω–∞—è, –∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {group}: {str(e)}")
        await asyncio.sleep(DELAY_SECONDS)

    print("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

async def auto_reply(message, reply_text):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞.
    """
    @client.on(events.NewMessage)
    async def handler(event):
        if event.message.message == message:
            await event.reply(reply_text)
            print(f"‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

async def main():
    await client.start(PHONE_NUMBER)
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")

    while True:
        print("==================================================")
        print("            Funpay : Vadya1112")
        print("            THX for your buying")
        print("==================================================")
        print("\n–ú–µ–Ω—é:")
        print("1. –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É")
        print("2. –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É")
        print("3. –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø")
        print("4. –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
        print("5. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É")
        print("6. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫")
        print("7. –í—ã–π—Ç–∏")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

        if choice == "1":
            group = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞: ").strip()
            add_group(group)
        elif choice == "2":
            group = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞: ").strip()
            remove_group(group)
        elif choice == "3":
            clear_groups()
        elif choice == "4":
            text = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ").strip()
            count = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ").strip())
            await send_spam(text, count)
        elif choice == "5":
            global DELAY_SECONDS
            DELAY_SECONDS = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö): ").strip())
            print(f"‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {DELAY_SECONDS} —Å–µ–∫.")
        elif choice == "6":
            message = input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: ").strip()
            reply_text = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: ").strip()
            await auto_reply(message, reply_text)
            print("‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        elif choice == "7":
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())
