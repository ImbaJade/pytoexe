import tkinter as tk
from tkinter import PhotoImage
import datetime


class ProductivityCalculator(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        self.geometry("400x450")
        self.configure(bg="#E6E6FA")  # –°–≤–µ—Ç–ª–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ü–≤–µ—Ç

        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–∫–æ–Ω–∫—É (—É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –∏–∫–æ–Ω–∫–µ .ico)
        self.icon= PhotoImage(file="C:/Users/student/PycharmProjects/AIOGRAM/png.png")  # –ó–∞–º–µ–Ω–∏—Ç–µ 'path_to_your_icon.ico' –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –∏–∫–æ–Ω–∫–µ
        self.iconphoto(True,self.icon)
        self.activities = {
            '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞': tk.StringVar(),
            '–û—Ç–¥—ã—Ö': tk.StringVar(),
            '–£—á–µ–±–∞': tk.StringVar(),
            '–°–ø–æ—Ä—Ç': tk.StringVar(),
            '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': tk.StringVar(),
            '–î—Ä—É–≥–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏': tk.StringVar()
        }

        self.create_widgets()

    def create_widgets(self):
        header = tk.Label(self, text="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", bg="#E6E6FA", font=("Helvetica", 16, "bold"))
        header.pack(pady=10)

        frame = tk.Frame(self, bg="#E6E6FA")
        frame.pack(pady=10)

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        for i, activity in enumerate(self.activities):
            label = tk.Label(frame, text=activity, bg="#E6E6FA", font=("Helvetica", 12))
            label.grid(row=i, column=0, padx=10, pady=5)

            entry = tk.Entry(frame, textvariable=self.activities[activity], width=10, font=("Helvetica", 12))
            entry.grid(row=i, column=1, padx=10, pady=5)

        submit_button = tk.Button(self, text="–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", command=self.calculate_productivity,
                                  bg="#4CAF50", fg="white", font=("Helvetica", 12, "bold"))
        submit_button.pack(pady=20)

    def calculate_productivity(self):
        total_time = datetime.timedelta()
        time_for_work = datetime.timedelta()

        for activity, time_str in self.activities.items():
            try:
                hours, minutes = map(int, time_str.get().split(':'))
                activity_time = datetime.timedelta(hours=hours, minutes=minutes)

                total_time += activity_time
                if activity == '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞':
                    time_for_work = activity_time

            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞",
                                     f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {activity}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")
                return

        productivity_ratio = (time_for_work / total_time) * 100 if total_time > datetime.timedelta(0) else 0

        results = f"\n–í–∞—à–µ –≤—Ä–µ–º—è, –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n"
        for activity in self.activities.keys():
            results += f"{activity}: {self.activities[activity].get()}\n"

        results += f"\n–û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time}\n"
        results += f"–í–∞—à –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {productivity_ratio:.2f}%\n"

        if productivity_ratio < 50:
            results += "üòü –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–ª—É—á—à–∏—Ç—å –≤–∞—à—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ."
        elif productivity_ratio < 75:
            results += "üòê –í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏, –Ω–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è."
        else:
            results += "üòÅ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã —Ö–æ—Ä–æ—à–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–≤–æ–µ –≤—Ä–µ–º—è."

        messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã", results)


if __name__ == "__main__":
    app = ProductivityCalculator()
    app.mainloop()