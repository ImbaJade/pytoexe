import tkinter as tk
from tkinter import filedialog, messagebox, ttk, simpledialog
from PIL import Image, ImageTk, ImageOps, ImageFilter
import os
import json
import subprocess
import platform
import time
from datetime import datetime
import hashlib

class GameBoostCenter:
    def __init__(self, root):
        self.root = root
        self.current_theme = "dark"
        self.animation_speed = 15
        self.animation_running = False
        self.games = []
        self.current_game_index = 0
        self.users = {}
        self.current_user = None
        self.game_sessions = {}
        self.settings_window = None
        self.cover_images = []  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.data_file = "games.json"
        self.users_file = "users.json"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤
        self.bg_color = "#1a1a1a"
        self.fg_color = "white"
        self.btn_bg = "#2d2d2d"
        self.highlight_color = "#4CAF50"
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        self.animation_direction = 0  # 0 - –Ω–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–∏, -1 - –≤–ª–µ–≤–æ, 1 - –≤–ø—Ä–∞–≤–æ
        self.animation_progress = 0
        self.current_cover_pos = 0
        self.next_cover_pos = 0
        self.current_cover_img = None
        self.next_cover_img = None
        
        self.create_widgets()
        self.load_data()
        self.check_authentication()
        self.update_display()

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.root.title("Game Boost Center")
        self.root.geometry("1100x650")
        self.root.configure(bg=self.bg_color)
        icon = PhotoImage(file='logo.png')
        window.iconphoto(True,icon)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
        self.top_frame = tk.Frame(self.root, bg=self.bg_color, height=50)
        self.top_frame.pack(fill=tk.X)
        
        self.settings_btn = tk.Button(self.top_frame, text="‚öôÔ∏è", font=("Arial", 16), 
                                    command=self.open_settings, bd=0, bg=self.btn_bg, fg=self.fg_color)
        self.settings_btn.pack(side=tk.RIGHT, padx=10)
        
        self.theme_btn = tk.Button(self.top_frame, text="üåì", font=("Arial", 16), 
                                 command=self.toggle_theme, bd=0, bg=self.btn_bg, fg=self.fg_color)
        self.theme_btn.pack(side=tk.RIGHT, padx=10)
        
        self.login_btn = tk.Button(self.top_frame, text="üë§", font=("Arial", 16), 
                                 command=self.login, bd=0, bg=self.btn_bg, fg=self.fg_color)
        self.login_btn.pack(side=tk.RIGHT, padx=10)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        self.main_frame = tk.Frame(self.root, bg=self.bg_color)
        self.main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        self.desc_frame = tk.Frame(self.main_frame, bg=self.bg_color, width=300)
        self.desc_frame.pack(side=tk.LEFT, fill=tk.Y, padx=20)
        
        self.game_title = tk.Label(self.desc_frame, text="", font=("Arial", 20), 
                                 fg=self.fg_color, bg=self.bg_color, wraplength=250)
        self.game_title.pack(pady=20)
        
        self.game_desc = tk.Label(self.desc_frame, text="", font=("Arial", 12), 
                                fg=self.fg_color, bg=self.bg_color, wraplength=250, justify=tk.LEFT)
        self.game_desc.pack()
        
        self.game_stats = tk.Label(self.desc_frame, text="", font=("Arial", 10), 
                                 fg=self.fg_color, bg=self.bg_color, wraplength=250, justify=tk.LEFT)
        self.game_stats.pack(pady=20)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Å –æ–±–ª–æ–∂–∫–æ–π
        self.center_frame = tk.Frame(self.main_frame, bg=self.bg_color)
        self.center_frame.pack(fill=tk.BOTH, expand=True)
        
        # Canvas –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–±–ª–æ–∂–µ–∫
        self.cover_canvas = tk.Canvas(self.center_frame, bg=self.bg_color, highlightthickness=0, width=1024, height=600)
        self.cover_canvas.pack(expand=True)
        self.cover_canvas.bind("<Button-1>", lambda e: self.play_game())
        
        # –ö–Ω–æ–ø–∫–∏ –ª–∏—Å—Ç–∞–Ω–∏—è
        self.prev_btn = tk.Button(self.center_frame, text="‚óÄ", font=("Arial", 20), 
                                command=self.prev_game, bd=0, bg=self.btn_bg, fg=self.fg_color)
        self.prev_btn.place(relx=0.05, rely=0.5, anchor="center")
        
        self.next_btn = tk.Button(self.center_frame, text="‚ñ∂", font=("Arial", 20), 
                                command=self.next_game, bd=0, bg=self.btn_bg, fg=self.fg_color)
        self.next_btn.place(relx=0.95, rely=0.5, anchor="center")
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_frame = tk.Frame(self.main_frame, bg=self.bg_color)
        self.control_frame.pack(fill=tk.X, pady=5)
        
        self.play_btn = tk.Button(self.control_frame, text="–ò–ì–†–ê–¢–¨", font=("Arial", 16), 
                                command=self.play_game, bg=self.highlight_color, fg="white", bd=0, padx=15, pady=5)
        self.play_btn.pack(side=tk.LEFT, padx=50)
        
        self.delete_btn = tk.Button(self.control_frame, text="–£–î–ê–õ–ò–¢–¨", font=("Arial", 16), 
                                  command=self.delete_game, bg="#F44336", fg="white", bd=0, padx=15, pady=5)
        self.delete_btn.pack(side=tk.RIGHT, padx=50)

    def open_settings(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if not self.current_user:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
            return
            
        if self.settings_window and self.settings_window.winfo_exists():
            self.settings_window.lift()
            return
            
        self.settings_window = tk.Toplevel(self.root)
        self.settings_window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.settings_window.geometry("500x600")
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        tab_control = ttk.Notebook(self.settings_window)
        
        # –í–∫–ª–∞–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã
        add_tab = ttk.Frame(tab_control)
        self.create_add_game_tab(add_tab)
        tab_control.add(add_tab, text="–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É")
        
        # –í–∫–ª–∞–¥–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∞)
        if self.users.get(self.current_user, {}).get("role") == "admin":
            user_tab = ttk.Frame(tab_control)
            self.create_user_tab(user_tab)
            tab_control.add(user_tab, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        
        tab_control.pack(expand=1, fill="both")
        self.settings_window.protocol("WM_DELETE_WINDOW", self.on_settings_close)

    def create_add_game_tab(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã"""
        tk.Label(parent, text="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:").pack(pady=(10, 0))
        name_entry = tk.Entry(parent, width=40)
        name_entry.pack()
        
        tk.Label(parent, text="–û–ø–∏—Å–∞–Ω–∏–µ:").pack(pady=(10, 0))
        desc_entry = tk.Text(parent, height=5, width=40)
        desc_entry.pack()
        
        tk.Label(parent, text="–ü—É—Ç—å –∫ –∏–≥—Ä–µ:").pack(pady=(10, 0))
        path_entry = tk.Entry(parent, width=40)
        path_entry.pack()
        tk.Button(parent, text="–û–±–∑–æ—Ä...", command=lambda: self.browse_file(path_entry)).pack()
        
        tk.Label(parent, text="–û–±–ª–æ–∂–∫–∞:").pack(pady=(10, 0))
        cover_entry = tk.Entry(parent, width=40)
        cover_entry.pack()
        tk.Button(parent, text="–û–±–∑–æ—Ä...", command=lambda: self.browse_image(cover_entry)).pack()
        
        tk.Button(parent, text="–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É", command=lambda: self.add_game(
            name_entry.get(),
            desc_entry.get("1.0", tk.END).strip(),
            path_entry.get(),
            cover_entry.get()
        )).pack(pady=20)

    def create_user_tab(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        tk.Label(parent, text="–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:").pack(pady=(10, 0))
        
        tk.Label(parent, text="–õ–æ–≥–∏–Ω:").pack()
        login_entry = tk.Entry(parent)
        login_entry.pack()
        
        tk.Label(parent, text="–ü–∞—Ä–æ–ª—å:").pack()
        pass_entry = tk.Entry(parent, show="*")
        pass_entry.pack()
        
        tk.Button(parent, text="–î–æ–±–∞–≤–∏—Ç—å", command=lambda: self.add_user(
            login_entry.get(),
            pass_entry.get()
        )).pack(pady=10)
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_list = tk.Listbox(parent)
        for user in self.users:
            if user != "admin":
                user_list.insert(tk.END, user)
        user_list.pack(fill=tk.BOTH, expand=True, pady=10)
        
        tk.Button(parent, text="–£–¥–∞–ª–∏—Ç—å", command=lambda: self.remove_user(
            user_list.get(tk.ACTIVE)
        )).pack()

    def load_cover_image(self, path, size=(450, 550)):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏ –∏–≥—Ä—ã"""
        if path and os.path.exists(path):
            try:
                img = Image.open(path)
                img = img.resize(size, Image.LANCZOS)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Ç–µ–Ω–∏ –∫–∞–∫ –≤ PS5
                shadow = Image.new('RGBA', (size[0]+20, size[1]+20), (0, 0, 0, 0))
                shadow.paste(ImageOps.expand(img.convert('RGBA'), border=10, fill=0), (0, 0))
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ –¥–ª—è —Ç–µ–Ω–∏
                shadow = shadow.filter(ImageFilter.GaussianBlur(10))
                
                # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö —Ç–µ–Ω–∏
                shadow.paste(img, (10, 10), img.convert('RGBA') if img.mode == 'RGBA' else None)
                
                return ImageTk.PhotoImage(shadow)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–±–ª–æ–∂–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        img = Image.new('RGBA', size, (0, 0, 0, 0))
        return ImageTk.PhotoImage(img)

    def start_animation(self, direction):
        """–ù–∞—á–∞–ª–æ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è"""
        if self.animation_running or len(self.games) < 2:
            return
            
        self.animation_direction = direction
        self.animation_progress = 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É
        next_index = (self.current_game_index + direction) % len(self.games)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∏ —Å–ª–µ–¥—É—é—â—É—é –æ–±–ª–æ–∂–∫–∏
        self.current_cover_img = self.load_cover_image(
            self.games[self.current_game_index].get("cover"))
        self.next_cover_img = self.load_cover_image(
            self.games[next_index].get("cover"))
        
        # –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        self.current_cover_pos = 0
        self.next_cover_pos = direction * 1100  # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–π –æ–±–ª–æ–∂–∫–∏
        
        self.animation_running = True
        self.animate_covers()

    def animate_covers(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è –æ–±–ª–æ–∂–µ–∫"""
        if not self.animation_running:
            return
            
        self.animation_progress += self.animation_speed
        
        # –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Å –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ–º –≤ –∫–æ–Ω—Ü–µ
        progress = min(self.animation_progress, 100) / 100
        ease_progress = self.ease_out_quad(progress)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
        self.current_cover_pos = -self.animation_direction * 1100 * ease_progress
        self.next_cover_pos = self.animation_direction * 1100 * (1 - ease_progress)
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –æ–±–ª–æ–∂–∫–∏
        self.draw_covers()
        
        if self.animation_progress < 100:
            self.root.after(16, self.animate_covers)  # ~60 FPS
        else:
            self.finish_animation()

    def ease_out_quad(self, t):
        """–§—É–Ω–∫—Ü–∏—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏"""
        return 1 - (1 - t) * (1 - t)

    def draw_covers(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–±–ª–æ–∂–µ–∫ –Ω–∞ canvas"""
        self.cover_canvas.delete("all")
        canvas_width = self.cover_canvas.winfo_width()
        canvas_height = self.cover_canvas.winfo_height()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–±–ª–æ–∂–∫–∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        y_pos = (canvas_height - 550) // 2
        
        # –¢–µ–∫—É—â–∞—è –æ–±–ª–æ–∂–∫–∞
        if self.current_cover_img:
            self.cover_canvas.create_image(
                canvas_width // 2 + self.current_cover_pos,
                y_pos,
                image=self.current_cover_img,
                anchor=tk.NW
            )
        
        # –°–ª–µ–¥—É—é—â–∞—è –æ–±–ª–æ–∂–∫–∞
        if self.next_cover_img:
            self.cover_canvas.create_image(
                canvas_width // 2 + self.next_cover_pos,
                y_pos,
                image=self.next_cover_img,
                anchor=tk.NW
            )

    def finish_animation(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞"""
        self.animation_running = False
        self.current_game_index = (self.current_game_index + self.animation_direction) % len(self.games)
        self.animation_direction = 0
        self.update_display()

    def prev_game(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–≥—Ä—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        if len(self.games) > 1:
            self.start_animation(-1)

    def next_game(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        if len(self.games) > 1:
            self.start_animation(1)

    def update_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã"""
        if not self.games:
            self.game_title.config(text="–ù–µ—Ç –∏–≥—Ä")
            self.game_desc.config(text="–î–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            self.game_stats.config(text="")
            self.cover_canvas.delete("all")
            return
        
        game = self.games[self.current_game_index]
        self.game_title.config(text=game["name"])
        self.game_desc.config(text=game["description"])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã
        stats_text = ""
        if "last_played" in game:
            stats_text += f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {game['last_played']}\n"
        if game["name"] in self.game_sessions:
            total_time = sum(s['duration'] for s in self.game_sessions[game['name']])
            stats_text += f"–í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {total_time//60} –º–∏–Ω {total_time%60} —Å–µ–∫\n"
        if self.current_user:
            stats_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.current_user}"
        
        self.game_stats.config(text=stats_text)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –æ–±–ª–æ–∂–∫–∏
        self.current_cover_img = self.load_cover_image(game.get("cover"))
        self.draw_covers()

    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π"""
        if self.current_theme == "dark":
            self.current_theme = "light"
            self.bg_color = "#f0f0f0"
            self.fg_color = "black"
            self.btn_bg = "#e0e0e0"
        else:
            self.current_theme = "dark"
            self.bg_color = "#1a1a1a"
            self.fg_color = "white"
            self.btn_bg = "#2d2d2d"
        
        self.update_theme_colors()

    def update_theme_colors(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.root.configure(bg=self.bg_color)
        self.top_frame.configure(bg=self.bg_color)
        self.main_frame.configure(bg=self.bg_color)
        self.desc_frame.configure(bg=self.bg_color)
        self.center_frame.configure(bg=self.bg_color)
        self.control_frame.configure(bg=self.bg_color)
        self.cover_canvas.configure(bg=self.bg_color)
        
        self.game_title.configure(bg=self.bg_color, fg=self.fg_color)
        self.game_desc.configure(bg=self.bg_color, fg=self.fg_color)
        self.game_stats.configure(bg=self.bg_color, fg=self.fg_color)
        
        for btn in [self.settings_btn, self.theme_btn, self.login_btn, 
                   self.prev_btn, self.next_btn]:
            btn.configure(bg=self.btn_bg, fg=self.fg_color)
        
        # –ö–Ω–æ–ø–∫–∞ "–ò–≥—Ä–∞—Ç—å" –≤—Å–µ–≥–¥–∞ –∑–µ–ª–µ–Ω–∞—è
        self.play_btn.configure(bg="#4CAF50")
        self.delete_btn.configure(bg="#F44336")

    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, "r", encoding='utf-8') as f:
                    self.games = json.load(f)
            
            if os.path.exists(self.users_file):
                with open(self.users_file, "r", encoding='utf-8') as f:
                    self.users = json.load(f)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:\n{str(e)}")

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª—ã"""
        try:
            with open(self.data_file, "w", encoding='utf-8') as f:
                json.dump(self.games, f, ensure_ascii=False, indent=4)
            
            with open(self.users_file, "w", encoding='utf-8') as f:
                json.dump(self.users, f, ensure_ascii=False, indent=4)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:\n{str(e)}")

    def play_game(self):
        """–ó–∞–ø—É—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã"""
        if not self.games or not self.current_user:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä")
            return
            
        game = self.games[self.current_game_index]
        game_path = os.path.abspath(os.path.expanduser(game["path"]))
        start_time = time.time()
        
        try:
            if not os.path.exists(game_path):
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω:\n{game_path}")
                return
            
            game_dir = os.path.dirname(game_path)
            
            if platform.system() == "Windows":
                try:
                    os.startfile(game_path)
                except:
                    subprocess.Popen([game_path], cwd=game_dir, shell=True)
            elif platform.system() == "Darwin":
                subprocess.Popen(["open", game_path], cwd=game_dir)
            else:
                subprocess.Popen([game_path], cwd=game_dir)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            game["last_played"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            if game["name"] not in self.game_sessions:
                self.game_sessions[game["name"]] = []
            self.game_sessions[game["name"]].append({
                "user": self.current_user,
                "date": game["last_played"],
                "duration": int(time.time() - start_time)
            })
            self.save_data()
            self.update_display()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É:\n{str(e)}")

    def delete_game(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã"""
        if not self.games or not self.current_user:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
            return
            
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∏–≥—Ä—É –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏?"):
            del self.games[self.current_game_index]
            self.current_game_index = max(0, min(self.current_game_index, len(self.games) - 1))
            self.save_data()
            self.update_display()

    def check_authentication(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not os.path.exists(self.users_file):
            self.register_admin()
        elif not self.current_user:
            self.login()

    def register_admin(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        password = simpledialog.askstring("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", show='*')
        if password:
            self.users["admin"] = {
                "password": hashlib.sha256(password.encode()).hexdigest(),
                "role": "admin"
            }
            self.save_data()
            self.current_user = "admin"
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

    def login(self):
        """–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        login = simpledialog.askstring("–í—Ö–æ–¥", "–í–≤–µ–¥–∏—Ç–µ –ò–≥—Ä–æ–∫")
        if login in self.users:
            password = simpledialog.askstring("–í—Ö–æ–¥", "–í–≤–µ–¥–∏—Ç–µ 123", show='*')
            if password and hashlib.sha256(password.encode()).hexdigest() == self.users[login]["password"]:
                self.current_user = login
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {login}!")
                return
        
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    def browse_file(self, entry):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞"""
        filepath = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–≥—Ä—ã",
            filetypes=[("–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã", "*.exe *.bat *.lnk"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        if filepath:
            entry.delete(0, tk.END)
            entry.insert(0, os.path.normpath(filepath))

    def browse_image(self, entry):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        filepath = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–æ–∂–∫—É",
            filetypes=[("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.png *.jpg *.jpeg"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        if filepath:
            entry.delete(0, tk.END)
            entry.insert(0, os.path.normpath(filepath))

    def add_game(self, name, description, path, cover):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""
        if not name or not path:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –ø—É—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
            return
            
        if not os.path.exists(path):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        self.games.append({
            "name": name,
            "description": description,
            "path": os.path.normpath(path),
            "cover": os.path.normpath(cover) if cover and os.path.exists(cover) else ""
        })
        self.save_data()
        self.update_display()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ò–≥—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")

    def add_user(self, login, password):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not login or not password:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å")
            return
            
        if login in self.users:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
            
        self.users[login] = {
            "password": hashlib.sha256(password.encode()).hexdigest(),
            "role": "user"
        }
        self.save_data()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω")

    def remove_user(self, login):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if login in self.users and login != "admin":
            del self.users[login]
            self.save_data()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")

    def on_settings_close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if self.settings_window:
            self.settings_window.destroy()
            self.settings_window = None

if __name__ == "__main__":
    root = tk.Tk()
    app = GameBoostCenter(root)
    root.mainloop()